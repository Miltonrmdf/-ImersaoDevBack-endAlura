
npm gerenciador/repositorio de dados do node js

estamos usando o prompt de comando do windows

primeiro comando 
npm init es6 -y
comando prepara o ambiente com o arquivo package.json onde fica tudo que instalo no projeto 

instala a ferramenta
npm  install express

criando o server 
arquivo server js

executar o servidor
node server.js
ou para não precisar parar o serviço apos atualizações use o comando abaixo. depois do watch colocar o nome do servidor

node --watch server.js

criar rota e definir respota

criando chave do gemini google para usar nos projetos, entrar no site 
www.alura.tv/google-gemini-api
depois aparece esse endereço
https://aistudio.google.com/app/apikey
 
eu gerei essa chave
AIzaSyDKerjMXJSXk6r6M1MmehKcAvSAtxDoW_c

foi criado um txt com a chave dentro do projeto e depois um arquivo gitignore para não subir esse arquvio da chave e nem a pasta node modules que só serve no meu projeto local ficou conforme abaixo
node_modules
chave-api.txt

aula 2

fizemos com a ajuda do gemini um array de objetos com id 

o site
http.cat
Tem explicações todas as respostas de status padrão possivel

agora estamo usando o mongo db na nuvem para fazer um bd

https://cloud.mongodb.com/
user miltonrmdf
senha gQWbGFEpqsUKSWJo
mongodb

mongodb+srv://miltonrmdf:140586@Tinho@cluster0.6ijxz.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0

aula 3
npm isntall mongodb no terminal

no mongo db criamos databasename imesao-isntabytes e a coleção posts

para proteger as informções sensiveis nesse caso usuário e senha usamos variaveis de ambiente, dai criamos o arquivo na raiz .env que assumiu iconde de engrenagem.
dentro desse arquivo é tudo maiusculo separado por _ underline

depois colocamos no package.jso despois de scripts o seguinte comando:
  
  "scripts": {
    "dev": "node --watch --env-file=.env server.js",
    "test": ""
node --watch (olhe) --env-file=.env(tem um arq de variavel de ambiente com a conexão) sever.js
essa linha automatiza e não vamos precisar digitar essa linha toda vez

é sempre indicado colocar o arquivo de conexção separado nesse caso criamos a pasta src a pasta config e por ultimo o arquivo dbConfig.js para colocar o drive de conexão com o mongo db cloud:

import { MongoClient } from 'mongodb';

export default async function conectarAoBanco(stringConexao) {
  let mongoClient;

  try {
      mongoClient = new MongoClient(stringConexao);
      console.log('Conectando ao cluster do banco de dados...');
      await mongoClient.connect();
      console.log('Conectado ao MongoDB Atlas com sucesso!');

      return mongoClient;
  } catch (erro) {
      console.error('Falha na conexão com o banco!', erro);
      process.exit();
  }
}

separamos as responsabilidades em pastas
controller (funções para manipular os dados get post put delete..., model (cuida dos dados) e rotas

modelo recebe as requisições e faz "coisa com ela"
rota por onde chegam as requisições
conexão com bd e faz conexões

aula 4

